-- Create teams table
CREATE TABLE public.teams (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  name text NOT NULL,
  team_code text NOT NULL UNIQUE,
  admin_user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Create team_members table
CREATE TABLE public.team_members (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  team_id bigint NOT NULL REFERENCES public.teams(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  role text NOT NULL DEFAULT 'member',
  status text NOT NULL DEFAULT 'active',
  joined_at timestamp with time zone DEFAULT now(),
  UNIQUE(team_id, user_id)
);

-- Create team_invitations table
CREATE TABLE public.team_invitations (
  id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
  team_id bigint NOT NULL REFERENCES public.teams(id) ON DELETE CASCADE,
  user_id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE,
  status text NOT NULL DEFAULT 'pending',
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now(),
  UNIQUE(team_id, user_id)
);

-- Create profiles table for user information
CREATE TABLE public.profiles (
  id uuid NOT NULL REFERENCES auth.users(id) ON DELETE CASCADE PRIMARY KEY,
  full_name text,
  current_team_id bigint REFERENCES public.teams(id),
  created_at timestamp with time zone DEFAULT now(),
  updated_at timestamp with time zone DEFAULT now()
);

-- Enable RLS on all tables
ALTER TABLE public.teams ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_members ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.team_invitations ENABLE ROW LEVEL SECURITY;
ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

-- RLS Policies for teams
CREATE POLICY "Users can view teams they belong to" ON public.teams
  FOR SELECT USING (
    auth.uid() = admin_user_id OR 
    auth.uid() IN (
      SELECT user_id FROM public.team_members 
      WHERE team_id = teams.id AND status = 'active'
    )
  );

CREATE POLICY "Users can create teams" ON public.teams
  FOR INSERT WITH CHECK (auth.uid() = admin_user_id);

CREATE POLICY "Team admins can update their teams" ON public.teams
  FOR UPDATE USING (auth.uid() = admin_user_id);

CREATE POLICY "Team admins can delete their teams" ON public.teams
  FOR DELETE USING (auth.uid() = admin_user_id);

-- RLS Policies for team_members
CREATE POLICY "Users can view team members of their teams" ON public.team_members
  FOR SELECT USING (
    auth.uid() IN (
      SELECT user_id FROM public.team_members tm 
      WHERE tm.team_id = team_members.team_id AND tm.status = 'active'
    ) OR
    auth.uid() IN (
      SELECT admin_user_id FROM public.teams 
      WHERE id = team_members.team_id
    )
  );

CREATE POLICY "Team admins can manage team members" ON public.team_members
  FOR ALL USING (
    auth.uid() IN (
      SELECT admin_user_id FROM public.teams 
      WHERE id = team_members.team_id
    )
  );

-- RLS Policies for team_invitations
CREATE POLICY "Users can view their own invitations" ON public.team_invitations
  FOR SELECT USING (auth.uid() = user_id);

CREATE POLICY "Users can create invitations for themselves" ON public.team_invitations
  FOR INSERT WITH CHECK (auth.uid() = user_id);

CREATE POLICY "Team admins can view and manage invitations to their teams" ON public.team_invitations
  FOR ALL USING (
    auth.uid() IN (
      SELECT admin_user_id FROM public.teams 
      WHERE id = team_invitations.team_id
    )
  );

-- RLS Policies for profiles
CREATE POLICY "Users can view all profiles" ON public.profiles
  FOR SELECT USING (true);

CREATE POLICY "Users can update their own profile" ON public.profiles
  FOR UPDATE USING (auth.uid() = id);

CREATE POLICY "Users can insert their own profile" ON public.profiles
  FOR INSERT WITH CHECK (auth.uid() = id);

-- Update existing tables to reference teams
ALTER TABLE public.brands ADD CONSTRAINT brands_team_id_fkey 
  FOREIGN KEY (team_id) REFERENCES public.teams(id);

ALTER TABLE public.themes ADD COLUMN team_id bigint REFERENCES public.teams(id);
ALTER TABLE public.personas ADD COLUMN team_id bigint REFERENCES public.teams(id);
ALTER TABLE public.contents ADD COLUMN team_id bigint REFERENCES public.teams(id);

-- Update RLS policies for existing tables to check team membership
DROP POLICY IF EXISTS "Users can view their own brands" ON public.brands;
DROP POLICY IF EXISTS "Users can create their own brands" ON public.brands;
DROP POLICY IF EXISTS "Users can update their own brands" ON public.brands;
DROP POLICY IF EXISTS "Users can delete their own brands" ON public.brands;

CREATE POLICY "Team members can view team brands" ON public.brands
  FOR SELECT USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can create team brands" ON public.brands
  FOR INSERT WITH CHECK (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can update team brands" ON public.brands
  FOR UPDATE USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can delete team brands" ON public.brands
  FOR DELETE USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

-- Apply similar policies to other tables
DROP POLICY IF EXISTS "Users can view their own themes" ON public.themes;
DROP POLICY IF EXISTS "Users can create their own themes" ON public.themes;
DROP POLICY IF EXISTS "Users can update their own themes" ON public.themes;
DROP POLICY IF EXISTS "Users can delete their own themes" ON public.themes;

CREATE POLICY "Team members can view team themes" ON public.themes
  FOR SELECT USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can create team themes" ON public.themes
  FOR INSERT WITH CHECK (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can update team themes" ON public.themes
  FOR UPDATE USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

CREATE POLICY "Team members can delete team themes" ON public.themes
  FOR DELETE USING (
    team_id IN (
      SELECT team_id FROM public.team_members 
      WHERE user_id = auth.uid() AND status = 'active'
    )
  );

-- Triggers for updated_at
CREATE TRIGGER update_teams_updated_at
  BEFORE UPDATE ON public.teams
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_team_invitations_updated_at
  BEFORE UPDATE ON public.team_invitations
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

CREATE TRIGGER update_profiles_updated_at
  BEFORE UPDATE ON public.profiles
  FOR EACH ROW
  EXECUTE FUNCTION public.update_updated_at_column();

-- Function to create profile automatically when user signs up
CREATE OR REPLACE FUNCTION public.handle_new_user()
RETURNS trigger
LANGUAGE plpgsql
SECURITY DEFINER SET search_path = ''
AS $$
BEGIN
  INSERT INTO public.profiles (id, full_name)
  VALUES (new.id, new.raw_user_meta_data ->> 'full_name');
  RETURN new;
END;
$$;

-- Trigger to create profile on user signup
CREATE TRIGGER on_auth_user_created
  AFTER INSERT ON auth.users
  FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();